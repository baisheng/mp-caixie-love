<script>
  /* eslint-disable no-undef,no-mixed-operators */

  import wepy from 'wepy'
  import Tips from '../utils/Tips'

  export default class baseMixin extends wepy.mixin {
    data = {
      cTopTips: {
        show: false,
        content: '成功'
      },
      dialog: {
        // 自定义 btn 列表
        // { type: 按钮类型，回调时以此作为区分依据，text: 按钮文案, color: 按钮文字颜色 }
        buttons: [],
        // 标题
        title: '',
        // 内容
        content: ' ',
        // 按钮是否展示为纵向
        buttonsShowVertical: false,
        // 是否展示确定
        showConfirm: true,
        // 确认按钮文案
        confirmText: '确定',
        // 确认按钮颜色
        confirmColor: '#3CC51F',
        // 是否展示取消
        showCancel: false,
        // 取消按钮文案
        cancelText: '取消',
        // 取消按钮颜色
        cancelColor: '#333'
      }
    }

    loaded () {
      this.init = true
      this.$apply()
      Tips.loaded()
    }

    // 卸载清理
    onUnload () {
      // Object.assign(this, this.def)
    }

    /**
     * [公共方法]
     * @param  {[type]}  item [description]
     * @return {Boolean}      [description]
     */
    noop () {
      return null
    }

    hasOwn (obj, type) {
      return Object.prototype.hasOwnProperty.call(obj, type)
    }

    /**
     * [isXXX 基础方法]
     * @param  {[type]}  item [description]
     * @return {Boolean}      [description]
     */
    isUndefined (item) {
      return typeof item === 'undefined'
    }

    isDefined (item) {
      return !this.isUndefined(item)
    }

    isString (item) {
      return typeof item === 'string'
    }

    isNumber (item) {
      return typeof item === 'number'
    }

    isArray (item) {
      return Object.prototype.toString.apply(item) === '[object Array]'
    }

    isObject (item) {
      return typeof item === 'object' && !this.isArray(item)
    }

    isFunction (item) {
      return typeof item === 'function'
    }

    /**
     * [getXXX 增强方法]
     * @param  {[type]}  item [description]
     * @return {Boolean}      [description]
     */
    getString (item, defaultStr) {
      if (this.isString(item)) return item.trim()
      if (this.isNumber(item)) return `${item}`.trim()
      return defaultStr || ''
    }

    getNumber (item, defaultNum) {
      var matches = this.getString(item).match(/\d+/)
      return this.isNumber(matches && +matches[0]) ? +matches[0] : defaultNum
    }

    getArray (item, defaultArr) {
      return this.isArray(item) ? item : (defaultArr || [])
    }

    getObject (item, defaultObj) {
      return this.isObject(item) ? item : (defaultObj || {})
    }

    getFunction (item) {
      return this.isFunction(item) ? item : this.noop
    }

    /**
     * [JSON方法]
     * @param  {[type]}  item [description]
     * @return {Boolean}      [description]
     */
    $json (item) {
      let str = {type: Object.prototype.toString.call(item)}
      try {
        str = JSON.stringify(item)
      } catch (e) {
        str.error = e && e.stack || ''
      }
      return this.isString(str) ? str : this.$json(str)
    }

    $parse (item) {
      let obj = {type: Object.prototype.toString.call(item)}
      try {
        obj = JSON.parse(item)
      } catch (e) {
        obj.error = e && e.stack || ''
      }
      return this.isObject(obj) ? obj : this.$parse(obj)
    }

    /**
     * [功能方法]
     * @param  {[type]}  item [description]
     * @return {Boolean}      [description]
     */
    isPhone (str) {
      return /^1\d{10}$/.test(str)
    }

    $alert (item = '标题', item2) {
      const param = this.isObject(item) ? Object.assign({
        // 首参数为obj
        title: 'title', content: 'content'
      }, item) : this.isString(item) ? this.isString(item2) ? {
        // 俩参数均为字符串
        title: item, content: item2
      } : {
        // 只有首参为字符串
        title: '', content: item
      } : {
        // 尝试转换字符串
        title: item.toString ? item.toString() : '参数异常'
      }
      wx.showModal(Object.assign({
        showCancel: false
      }, param))
    }

    $showTopTips (content = '', options = {}) {
      let cTopTips = this.cTopTips || {}
      // 如果已经有一个计时器在了，就清理掉先
      if (cTopTips.timer) {
        clearTimeout(cTopTips.timer)
        cTopTips.timer = undefined
      }

      if (typeof options === 'number') {
        options = {
          duration: options
        }
      }

      // options参数默认参数扩展
      options = Object.assign({
        duration: 3000
      }, options)

      // 设置定时器，定时关闭topTips
      let timer = setTimeout(() => {
        this.cTopTips = {
          'show': false,
          'timer': undefined
        }
        this.$apply()
      }, options.duration)
      this.cTopTips = {
        show: true,
        content,
        options,
        timer,
        type: options.type ? options.type : ''
      }
      console.log(JSON.stringify(options))
      this.$apply()
    }

    $showDialog (options = {}) {
      console.log('show dialog....')
      const {
        // 自定义 btn 列表
        // { type: 按钮类型，回调时以此作为区分依据，text: 按钮文案, color: 按钮文字颜色 }
        buttons = [],
        // 标题
        title = '',
        // 内容
        content = ' ',
        // 按钮是否展示为纵向
        buttonsShowVertical = false,
        // 是否展示确定
        showConfirm = true,
        // 确认按钮文案
        confirmText = '确定',
        // 确认按钮颜色
        confirmColor = '#4EC0AA',
        // 是否展示取消
        showCancel = false,
        // 取消按钮文案
        cancelText = '取消',
        // 取消按钮颜色
        cancelColor = '#344A5E'
      } = options

      // 处理默认按钮的展示
      // 纵向排布确认按钮在上方
      let showCustomBtns = false
      if (buttons.length === 0) {
        if (showConfirm) {
          buttons.push({
            type: 'confirm',
            text: confirmText,
            color: confirmColor
          })
        }

        if (showCancel) {
          const cancelButton = {
            type: 'cancel',
            text: cancelText,
            color: cancelColor
          }
          if (buttonsShowVertical) {
            buttons.push(cancelButton)
          } else {
            buttons.unshift(cancelButton)
          }
        }
      } else {
        showCustomBtns = true
      }
      return new Promise((resolve, reject) => {
        this.dialog = {
          show: true,
          showCustomBtns,
          buttons,
          title,
          content,
          buttonsShowVertical,
          showConfirm,
          confirmText,
          confirmColor,
          showCancel,
          cancelText,
          cancelColor,
          // 回调钩子
          resolve,
          reject
        }
        this.$apply()
      })
    }
  }

</script>
